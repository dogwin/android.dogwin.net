package dogwin.net.check;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams;import org.apache.http.protocol.BasicHttpContext;import org.apache.http.protocol.HttpContext;import org.json.JSONException;import org.json.JSONObject;import android.content.Context;import android.util.Log;public class JSONParser {	static InputStream is = null;    static JSONObject jObj = null;    static String json = "";    Context ctx;    // constructor    public JSONParser(Context ctx) {    	this.ctx = ctx;    }     public JSONObject getJSONFromUrl(String url) {    	System.out.println("url=>"+url);        // Making HTTP request        try {        	            // defaultHttpClient            //DefaultHttpClient httpClient = new DefaultHttpClient();            //HttpPost httpPost = new HttpPost(feedUrl);            HttpGet httpGet = new HttpGet(url);            HttpParams httpParameters = new BasicHttpParams();	        // Set the timeout in milliseconds until a connection is established.	        // The default value is zero, that means the timeout is not used. 	        int timeoutConnection = 3000;	        HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutConnection);	         // Set the default socket timeout (SO_TIMEOUT) 	         // in milliseconds which is the timeout for waiting for data.	        int timeoutSocket = 5000;	        HttpConnectionParams.setSoTimeout(httpParameters, timeoutSocket);	        	        DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);	                    System.out.println("httpGet=>"+httpGet);            HttpContext localContext = new BasicHttpContext();                        HttpResponse httpResponse = httpClient.execute(httpGet,localContext);            HttpEntity httpEntity = httpResponse.getEntity();            is = httpEntity.getContent();                       System.out.println("IS=>"+is);                    } catch (UnsupportedEncodingException e) {            e.printStackTrace();        } catch (ClientProtocolException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }         try {            BufferedReader reader = new BufferedReader(new InputStreamReader(is, "iso-8859-1"), 8);                        StringBuilder sb = new StringBuilder();            String line = null;            while ((line = reader.readLine()) != null) {                sb.append(line + "\n");            }            is.close();            json = sb.toString();        } catch (Exception e) {            Log.e("Buffer Error", "Error converting result " + e.toString());        }         // try parse the string to a JSON object        try {            jObj = new JSONObject(json);        } catch (JSONException e) {            Log.e("JSON Parser", "Error parsing data " + e.toString());        }         // return JSON String        return jObj;     }}